<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pythônico - Intro</title><link href="https://corvalan.dev/pitonico/pt/" rel="alternate"></link><link href="https://corvalan.dev/pitonico/feeds/intro.atom.xml" rel="self"></link><id>https://corvalan.dev/pitonico/pt/</id><updated>2019-09-26T12:37:00-03:00</updated><subtitle>por Daniel Corvalán</subtitle><entry><title>Instalando Python</title><link href="https://corvalan.dev/pitonico/pt/instalando.html" rel="alternate"></link><published>2019-09-26T12:37:00-03:00</published><updated>2019-09-26T12:37:00-03:00</updated><author><name>Daniel Corvalán</name></author><id>tag:corvalan.dev,2019-09-26:/pitonico/pt/instalando.html</id><summary type="html">&lt;p&gt;Para programar, precisaremos de duas coisas: um editor de texto e o interpretador do Python.&lt;/p&gt;
&lt;p&gt;O Python existe em duas versões: Python 2.7 e Python 3.x (sendo a versão mais recente 3.7.4). Nesta introdução ao Python, usaremos a versão 3.7, por um motivo muito simples …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Para programar, precisaremos de duas coisas: um editor de texto e o interpretador do Python.&lt;/p&gt;
&lt;p&gt;O Python existe em duas versões: Python 2.7 e Python 3.x (sendo a versão mais recente 3.7.4). Nesta introdução ao Python, usaremos a versão 3.7, por um motivo muito simples: a versão 2.7 perderá o suporte da equipe de desenvolvedores do Python em [1 de janeiro de 2020] (https://pythonclock.org). Isso significa que você não terá atualizações de segurança ou correção de erros (bugs) encontrados no linguagem. Considerando que a versão 3 é a que permanecerá em desenvolvimento, preferimos essa versão à outra.&lt;/p&gt;
&lt;p&gt;Hoje, a maioria das bibliotecas/módulos de código escritos em Python são compatíveis para ambas as versões, mas não são todas. É por isso que, para trabalhar em projetos com diferentes versões do Python, é aconselhável criar ambientes virtuais (ou &lt;em&gt;virtual environments&lt;/em&gt;). E eles não apenas trabalham para isso, quando possuem projetos que dependem de bibliotecas criadas por outras pessoas, um ambiente virtual permite que você saiba imediatamente com quais bibliotecas (e qual versão de cada uma delas) seu código funciona corretamente, facilitando a exportação do código, seja para produção ou para trabalhar em equipe. Agora, o Python possui seu próprio gerenciador de ambientes virtuais, mas a maneira de executar é diferente entre os sistemas operacionais.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Foto" src="https://corvalan.dev/pitonico/pt/images/python_environment.png"&gt;&lt;/p&gt;
&lt;p&gt;Para evitar cair em um emaranhado como o deste desenho animado do [xkcd] (https://xkcd.com/), apresentarei uma opção comum aos três sistemas operacionais mais populares: Windows, macOS e Linux/Ubuntu. E este é o [Miniconda] (https://docs.conda.io/en/latest/miniconda.html).&lt;/p&gt;
&lt;p&gt;Para instalá-lo, você deve primeiro conhecer a versão do seu sistema operacional. No Windows, você pode seguir este guia (https://support.microsoft.com/es-cl/help/13443/windows-which-version-am-i-running) para obter as informações. No Linux e no macOS, é tão simples quanto escrever no terminal &lt;code&gt;getconf LONG_BIT&lt;/code&gt;. A resposta será de 32 ou 64 bits.&lt;/p&gt;
&lt;p&gt;Com essas informações em mãos, baixamos a versão correta do instalador do Miniconda. E com isso teremos conosco, o gerenciador do &lt;em&gt;virtual environment&lt;/em&gt; conda, o gerenciador de pacotes (&lt;em&gt;package manager&lt;/em&gt;) pip e as duas versões do Python (3.7 sendo o padrão).&lt;/p&gt;
&lt;p&gt;Também precisaremos de um editor de texto. Há uma grande variedade deles e você pode escolher o que mais lhe convier. No entanto, eu recomendo que você instale o [Sublime Text 3] (https://www.sublimetext.com/3) por ser extremamente amigável. &lt;strike&gt; Embora eu realmente use apenas &lt;a href="https://www.vim.org"&gt;vim&lt;/a&gt;.&lt;/strike&gt;&lt;/p&gt;
&lt;p&gt;Agora, com tudo isso, já temos um ambiente adequado para podermos programar.&lt;/p&gt;
&lt;p&gt;Para testá-lo, abra o terminal (Ctrl + T, no Linux e macOS) ou, se você usa o Windows, o Command Prompt (e não o PowerShell) que apareceu após a instalação do Miniconda no Windows (que chamarei indistintamente do terminal agora em diante). E escreva &lt;code&gt;python -V&lt;/code&gt;. Se a resposta for Python 3.7, tudo está pronto.&lt;/p&gt;
&lt;p&gt;Agora vamos criar nosso primeiro código, um "Olá, mundo". Este pequeno programa é o objetivo de conhecer em geral a sintaxe específica de um idioma. Primeiro, criaremos nosso &lt;em&gt;virtual environment&lt;/em&gt; digitando &lt;code&gt;conda create -n intro&lt;/code&gt; onde intro é o nome do nosso ambiente.&lt;/p&gt;
&lt;p&gt;Para ativar o ambiente, vocês devem escrever &lt;code&gt;conda activate intro&lt;/code&gt;. Aparecerá (intro) antes do seu nome de usuário no terminal. Agora abra seu editor de texto e escreva &lt;code&gt;print("Olá, mundo")&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="line-numbers" id="uno"&gt;
&lt;button class="fa fa-play play-button" onclick="runit('uno','dos')" style="color: white; border:none; background: none; position: absolute; top: 0; right: 0; bottom: 0;" aria-label="Ejecutar" hidden=""&gt;&lt;/button&gt;&lt;code class="language-python"&gt;print("Olá, mundo")
&lt;/code&gt;&lt;/pre&gt;

&lt;pre id="dos"&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;(Você pode testá-lo aqui, clicando no botão play.)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Crie uma pasta na Desktop para salvar seu código. Chame de Pitonico, porque sim. Nele, salve o arquivo que você criou no editor de texto e chame-o de "intro.py".&lt;/p&gt;
&lt;p&gt;Agora, no terminal, vá para a pasta Pitonico. Para fazer isso, escreva &lt;code&gt;cd Desktop&lt;/code&gt; e pressione Enter; depois &lt;code&gt;cd Pythonico&lt;/code&gt;, Enter, e eles estarão dentro. A partir daí, escreva &lt;code&gt;python intro.py&lt;/code&gt;. O resultado deve aparecer no terminal mesmo.&lt;/p&gt;
&lt;p&gt;Parabéns! Você criou seu primeiro programa.&lt;/p&gt;
&lt;p&gt;Por último, escreva &lt;code&gt;conda deactivate&lt;/code&gt; no terminal.&lt;/p&gt;
&lt;p&gt;E pronto!&lt;/p&gt;
&lt;p&gt;A partir de agora, o código que escreveremos estará sempre na pasta Pitonico e deve ser executado a partir do terminal, com o ambiente intro ativo.&lt;/p&gt;</content><category term="python"></category><category term="programming"></category><category term="coding"></category></entry><entry><title>O digital nas humanidades digitais</title><link href="https://corvalan.dev/pitonico/pt/lo-digital.html" rel="alternate"></link><published>2019-09-21T14:42:00-03:00</published><updated>2019-09-21T14:42:00-03:00</updated><author><name>Daniel Corvalán</name></author><id>tag:corvalan.dev,2019-09-21:/pitonico/pt/lo-digital.html</id><summary type="html">&lt;p&gt;Aprender a programar, ao saber escrever argumentativamente, é relativamente simples. E a programação é outra ferramenta a ser aplicada ao estudo das ciências humanas. Desde a criação e preservação de obras digitais até a análise de textos em massa e a visualização de dados, a programação abre uma infinidade de possibilidades no estudo do que nos torna humanos.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Estudar humanidades significa aprender a escrever e ler de novo. Ler criticamente, nas entrelinhas, observando contradições e suposições, sem perder o argumento entre prosas secas ou extremamente pomposas. E também escrever de forma coerente, clara e concisa, fazendo brotar um estilo próprio que, por sua vez, deve se adaptar ao público a que se dirige, gerando argumentos para apoiar e defender a hipótese em jogo, utilizando recursos estilísticos cuja relevância acabará por ser testada durante o processo de edição. Aprender a programar é muito semelhante: você deve aprender a escrever e ler em uma nova linguagem, uma linguagem de programação. Ele deve ser escrito de forma coerente, sequencial e simples, porque ao trabalhar em equipe, é necessário que todos entendam o que seu código expressa. Em vez de gerar argumentos, são funções que ordenam um código que deve oferecer uma solução para o problema em questão. E o código, como um texto, não é estranho ao processo de edição, embora aqui o chamemos de refatoração. E é a maneira pela qual uma solução é fornecida que é testada e que permite a leitura crítica do código.&lt;/p&gt;
&lt;p&gt;Aprender a programar, ao saber escrever argumentativamente, é relativamente simples. E a programação é outra ferramenta a ser aplicada ao estudo das ciências humanas. Desde a criação e preservação de obras digitais até a análise de textos em massa e a visualização de dados, a programação abre uma infinidade de possibilidades no estudo do que nos torna humanos. &lt;/p&gt;
&lt;p&gt;Este blog foi criado com a intenção de ensinar outros humanistas a programar. E a linguagem de programação que vou apresentar é o Python. Considerando que as razões para aprender um idioma sobre outro são as bibliotecas (e, portanto, o nicho para o qual eles apontam) e a comunidade que os mantém, o Python é uma opção rica em ambos. E, acima de tudo, é uma linguagem com sintaxe extremamente simples, que não apenas facilita a escrita do código Python, mas também a leitura.&lt;/p&gt;
&lt;p&gt;No próximo post, mostrarei o que instalar para começar.&lt;/p&gt;</content><category term="python"></category><category term="programming"></category><category term="coding"></category><category term="digital humanities"></category><category term="humanities"></category></entry></feed>